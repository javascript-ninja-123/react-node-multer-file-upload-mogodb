{
  "_args": [
    [
      {
        "raw": "multer-gridfs-storage",
        "scope": null,
        "escapedName": "multer-gridfs-storage",
        "name": "multer-gridfs-storage",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Sung/Desktop/file-upload"
    ]
  ],
  "_from": "multer-gridfs-storage@latest",
  "_id": "multer-gridfs-storage@3.0.1",
  "_inCache": true,
  "_location": "/multer-gridfs-storage",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/multer-gridfs-storage_3.0.1_1521909185182_0.7006347107634838"
  },
  "_npmUser": {
    "name": "devconcept",
    "email": "devconcept@outlook.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "multer-gridfs-storage",
    "scope": null,
    "escapedName": "multer-gridfs-storage",
    "name": "multer-gridfs-storage",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-3.0.1.tgz",
  "_shasum": "5c908dbc6e468f979ea2e0d506a35115515d5a36",
  "_shrinkwrap": null,
  "_spec": "multer-gridfs-storage",
  "_where": "/Users/Sung/Desktop/file-upload",
  "author": {
    "name": "devconcept",
    "email": "devconcept@outlook.com"
  },
  "bugs": {
    "url": "https://github.com/devconcept/multer-gridfs-storage/issues"
  },
  "dependencies": {
    "es6-promise": "^4.2.4",
    "is-generator": "^1.0.3",
    "is-promise": "^2.1.0",
    "mongodb": ">=2",
    "mongodb-uri": "^0.9.7",
    "multer": "^1.3.0",
    "pump": "^1.0.3"
  },
  "description": "Multer storage engine for GridFS",
  "devDependencies": {
    "babel-polyfill": "^6.23.0",
    "babel-preset-env": "^1.6.1",
    "babel-register": "^6.24.1",
    "bluebird": "^3.5.1",
    "chai": "^3.5.0",
    "chai-interface": "^2.0.3",
    "coveralls": "^2.13.3",
    "eslint": "^2.10.2",
    "express": "^4.16.2",
    "istanbul": "^0.4.3",
    "jsdoc": "^3.5.5",
    "md5-file": "^2.0.4",
    "mocha": "^2.4.5",
    "mocha-lcov-reporter": "^1.2.0",
    "mute": "^2.0.6",
    "sinon": "^2.2.0",
    "sinon-chai": "^2.14.0",
    "supertest": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-FPA6U1S8w0OtxuMEG0cPIrQrBOy+lQax2nIepuzrcW9r6yKSjBK+1ZxgDHsnhYTlE38WHkjxdpwPse4rSECWHA==",
    "shasum": "5c908dbc6e468f979ea2e0d506a35115515d5a36",
    "tarball": "https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-3.0.1.tgz",
    "fileCount": 6,
    "unpackedSize": 34732
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "LICENSE",
    "CHANGELOG.md",
    "README.md",
    "index.js",
    "lib/"
  ],
  "gitHead": "d1cb39997e8d2fe6a7d3c291c444ca7d47d1e847",
  "homepage": "https://github.com/devconcept/multer-gridfs-storage",
  "keywords": [
    "multer",
    "mongodb",
    "storage",
    "gridfs"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "devconcept",
      "email": "rafaelalberto.barata@nauta.cu"
    }
  ],
  "name": "multer-gridfs-storage",
  "optionalDependencies": {},
  "peerDependencies": {
    "multer": "^1.0.0"
  },
  "readme": "# Multer's GridFS storage engine\r\n\r\n[![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] ![Npm version][version-image] ![Downloads][downloads-image]\r\n\r\n[GridFS](https://docs.mongodb.com/manual/core/gridfs) storage engine for [Multer](https://github.com/expressjs/multer) to store uploaded files directly to MongoDb.\r\n\r\nThis module is intended to be used with the v1.x branch of Multer.\r\n\r\n## Features\r\n\r\n- Compatibility with MongoDb versions 2 and 3\r\n- Full Node.js support from versions 0.10 to 8\r\n- Promise support\r\n- Generator functions support\r\n- Really simple api\r\n- Automatic management of MongoDb connection or the possibility to reuse an existing one\r\n- Delayed file storage until the connection is available  \r\n\r\n## Installation\r\n\r\nUsing npm\r\n\r\n```sh\r\n$ npm install multer-gridfs-storage --save\r\n```\r\n\r\nBasic usage example:\r\n\r\n```javascript\r\nconst express = require('express');\r\nconst multer  = require('multer');\r\n\r\n// Create a storage object with a given configuration\r\nconst storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://yourhost:27017/database'\r\n});\r\n\r\n// Set multer storage engine to the newly created object\r\nconst upload = multer({ storage: storage });\r\n\r\nconst app = express()\r\n\r\n// Upload your files as usual\r\nconst sUpload = upload.single('avatar');\r\napp.post('/profile', sUpload, (req, res, next) => { \r\n    /*....*/ \r\n})\r\n\r\nconst arrUpload = upload.array('photos', 12);\r\napp.post('/photos/upload', arrUpload, (req, res, next) => {\r\n    /*....*/ \r\n})\r\n\r\nconst fUpload = upload.fields([{ name: 'avatar', maxCount: 1 }, { name: 'gallery', maxCount: 8 }])\r\napp.post('/cool-profile', fUpload, (req, res, next) => {\r\n    /*....*/ \r\n})\r\n```\r\n\r\n## API\r\n\r\n### module(options): function\r\n\r\nThe module returns a function that can be invoked with options to create a Multer storage engine.\r\n\r\nCheck the [wiki][wiki] for an in depth guide on how to use this module.\r\n\r\n### Options\r\n\r\nThe options parameter is an object with the following properties.\r\n\r\n#### url\r\n\r\nType: `string`\r\n\r\nRequired if [`db`][db-option] option is not present\r\n\r\nThe mongodb connection uri. \r\n\r\nA string pointing to the database used to store the incoming files. This must be a standard mongodb [connection string][connection-string].\r\n\r\nWith this option the module will create a mongodb connection for you instead. \r\n\r\nNote: If the [`db`][db-option] option is specified this setting is ignored.\r\n\r\nExample:\r\n\r\n```javascript\r\nconst storage = require('multer-gridfs-storage')({\r\n    url: 'mongodb://yourhost:27017/database'\r\n});\r\n```\r\n\r\n> Note: The connected database is available in the `storage.db` property. On mongodb v3 the client instance is also available in the `storage.client` property.\r\n\r\n#### connectionOpts\r\n\r\nType: object\r\n\r\nNot required\r\n\r\nThis setting allows you to customize how this module establishes the connection if you are using the [`url`][url-option] option. \r\n\r\nYou can set this to an object like is specified in the [`MongoClient.connect`][mongoclient-connect] documentation and change the default behavior without having to create the connection yourself using the [`db`][db-option] option.\r\n\r\n#### db\r\n\r\nType: [`DB`][mongo-db] or `Promise`\r\n\r\nRequired if [`url`][url-option] option is not present\r\n\r\nThe database connection to use or a promise that resolves with the connection.\r\n\r\nThis is useful to reuse an existing connection to create more storage objects.\r\n\r\nExample:\r\n\r\n```javascript\r\n// mongodb v2 using a database instance\r\nMongoClient.connect('mongodb://yourhost:27017/database').then(database => {\r\n  storage = new GridFSStorage({ db: database });\r\n});\r\n```\r\n\r\n```javascript\r\n// mongodb v2 using a promise\r\nconst promise = MongoClient.connect('mongodb://yourhost:27017/database');\r\nstorage = new GridFSStorage({ db: promise });\r\n```\r\n\r\n```javascript\r\n// mongodb v3 using a database instance\r\nMongoClient.connect('mongodb://yourhost:27017').then(client => {\r\n  const database = client.db('database')\r\n  storage = new GridFSStorage({ db: database });\r\n});\r\n```\r\n\r\n```javascript\r\n// mongodb v3 using a promise\r\nconst promise = MongoClient\r\n  .connect('mongodb://yourhost:27017')\r\n  .then(client => client.db('database'));\r\n  \r\nstorage = new GridFSStorage({ db: promise });\r\n```\r\n\r\n#### file\r\n\r\nType: `function` or `function*`\r\n\r\nNot required\r\n\r\nA function to control the file storage in the database. Is invoked **per file** with the parameters `req` and `file`, in that order.\r\n\r\nBy default, this module behaves exactly like the default Multer disk storage does. It generates a 16 bytes long name in hexadecimal format with no extension for the file to guarantee that there are very low probabilities of naming collisions. You can override this by passing your own function.\r\n\r\nThe return value of this function is an object or a promise that resolves to an object (this also applies to generators) with the following properties. \r\n\r\nProperty name | Description\r\n------------- | -----------\r\n`filename` | The desired filename for the file (default: 16 byte hex name without extension)\r\n`id` | An ObjectID to use as identifier (default: auto-generated)\r\n`metadata` | The metadata for the file (default: `null`)\r\n`chunkSize` | The size of file chunks in bytes (default: 261120)\r\n`bucketName` | The GridFs collection to store the file (default: `fs`)\r\n`contentType` | The content type for the file (default: inferred from the request)\r\n\r\nAny missing properties will use the defaults.\r\n\r\nIf you return `null` or `undefined` from the file function, the values for the current file will also be the defaults. This is useful when you want to conditionally change some files while leaving others untouched.\r\n\r\nThis example will use the collection `'photos'` only for incoming files whose reported mime-type is `image/jpeg`, the others will be stored using default values.\r\n\r\n```javascript\r\nconst GridFsStorage = require('multer-gridfs-storage');\r\n\r\nconst storage = new GridFsStorage({\r\n  url: 'mongodb://host:27017/database',\r\n  file: (req, file) => {\r\n    if (file.mimetype === 'image/jpeg') {\r\n      return {\r\n        bucketName: 'photos'\r\n      };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n```\r\n\r\nThis other example names every file something like `'file_1504287812377'`, using the date to change the number and to generate unique values\r\n\r\n```javascript\r\nconst GridFsStorage = require('multer-gridfs-storage');\r\n\r\nconst storage = new GridFsStorage({\r\n  url: 'mongodb://host:27017/database',\r\n  file: (req, file) => {\r\n    return {\r\n      filename: 'file_' + Date.now()\r\n    };\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n```\r\n\r\nIs also possible to return values other than objects, like strings or numbers, in which case they will be used as the filename and the remaining properties will use the defaults. This is a simplified version of a previous example\r\n\r\n```javascript\r\nconst GridFsStorage = require('multer-gridfs-storage');\r\n\r\nconst storage = new GridFsStorage({\r\n  url: 'mongodb://host:27017/database',\r\n  file: (req, file) => {\r\n    // instead of an object a string is returned\r\n    return 'file_' + Date.now();\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n```\r\n\r\nInternally the function `crypto.randomBytes` is used to generate names. In this example, files are named using the same format plus the extension as received from the client, also changing the collection where to store files to `uploads`\r\n\r\n```javascript\r\nconst crypto = require('crypto');\r\nconst path = require('path');\r\nconst GridFsStorage = require('multer-gridfs-storage');\r\n\r\nvar storage = new GridFsStorage({\r\n  url: 'mongodb://host:27017/database',\r\n  file: (req, file) => {\r\n    return new Promise((resolve, reject) => {\r\n      crypto.randomBytes(16, (err, buf) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        const filename = buf.toString('hex') + path.extname(file.originalname));\r\n        const fileInfo = {\r\n          filename: filename,\r\n          bucketName: 'uploads'\r\n        };\r\n        resolve(fileInfo);\r\n      });\r\n    });\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n```\r\n\r\n### File information\r\n\r\nEach file in `req.file` and `req.files` contain the following properties in addition to the ones that Multer create by default. Most of them can be set using the [`file`][file-option] configuration.\r\n\r\nKey | Description\r\n--- | -----------\r\n`filename` | The name of the file within the database\r\n`metadata` | The stored metadata of the file\r\n`id` | The id of the stored file\r\n`bucketName` | The name of the GridFs collection used to store the file\r\n`chunkSize` | The size of file chunks used to store the file\r\n`size` | The final size of the file in bytes\r\n`md5` | The md5 hash of the file\r\n`contentType` | Content type of the file in the database\r\n`uploadDate` | The timestamp when the file was uploaded\r\n\r\nTo see all the other properties of the file object, check the Multer's [documentation](https://github.com/expressjs/multer#file-information).\r\n\r\n> Note: \r\n\r\n> Do not confuse `contentType` with Multer's `mimetype`. The first is the value in the database while the latter is the value in the request. \r\n\r\n> You could choose to override the value at the moment of storing the file. In most cases both values should be equal. \r\n\r\n### Events\r\n\r\nEach storage object is also a standard Node.js Event Emitter. This is done to ensure that some internal events can also be handled in user code.\r\n\r\n#### Event: `'connection'`\r\n\r\nThis event is emitted when the MongoDb connection is ready to use.\r\n\r\n*Event arguments*\r\n\r\n - db: The MongoDb database object that holds the connection\r\n\r\nThis event is triggered at most once.\r\n\r\n#### Event: `'connectionFailed'`\r\n\r\nThis event is emitted when the connection could not be opened.\r\n\r\n - err: The connection error\r\n\r\nThis event only triggers at most once. \r\n\r\n> Only one of the events `connection` or `connectionFailed ` will be emitted.\r\n\r\n#### Event: `'file'`\r\n\r\nThis event is emitted every time a new file is stored in the db. \r\n\r\n*Event arguments*\r\n\r\n - file: The uploaded file\r\n\r\n\r\n#### Event: `'streamError'`\r\n\r\nThis event is emitted when there is an error streaming the file to the database.\r\n\r\n*Event arguments*\r\n\r\n - error: The streaming error\r\n - conf: The failed file configuration\r\n \r\n> Note:\r\n\r\n> Previously this event was named `error` which seemed to be the most logical choice but unfortunately this introduces a problem: \r\n\r\n> In node.js `error` events are special and crash the process if an error is emitted and there is no `error` listener attached. You could choose to handle errors in an [express middleware][error-handling] forcing you to set an empty `error` listener to avoid crashing.\r\n \r\n> To simplify the issue this event was renamed to allow you to choose the best way to handle storage errors.\r\n \r\n#### Event: `'dbError'`\r\n \r\nThis event is emitted when the underlying connection emits an error.\r\n \r\n > Only available when the storage is created with the [`url`][url-option] option.\r\n \r\n*Event arguments*\r\n \r\n - error: The error emitted by the database connection\r\n\r\n\r\n## Test\r\n\r\nTo run the test suite, first install the dependencies, then run `npm test`:\r\n\r\n```bash\r\n$ npm install\r\n$ npm test\r\n```\r\n\r\nTests are written with [mocha](https://mochajs.org/) and [chai](http://chaijs.com/).\r\n\r\n> Due to incompatibilities between node 0.x versions and the [mongodb-core](https://github.com/mongodb-js/mongodb-core) packages testing for those engine versions have been excluded. If you find a bug feel free to [report it](https://github.com/devconcept/multer-gridfs-storage/issues). \r\n\r\nCode coverage thanks to [istanbul](https://github.com/gotwarlost/istanbul)\r\n\r\n```bash\r\n$ npm coverage\r\n```\r\n\r\n## License\r\n\r\n[MIT](https://github.com/devconcept/multer-gridfs-storage/blob/master/LICENSE)\r\n\r\n[travis-url]: https://travis-ci.org/devconcept/multer-gridfs-storage\r\n[travis-image]: https://travis-ci.org/devconcept/multer-gridfs-storage.svg?branch=master \"Build status\"\r\n[coveralls-url]: https://coveralls.io/github/devconcept/multer-gridfs-storage?branch=master\r\n[coveralls-image]: https://coveralls.io/repos/github/devconcept/multer-gridfs-storage/badge.svg?branch=master \"Coverage report\"\r\n[version-image]:https://img.shields.io/npm/v/multer-gridfs-storage.svg \"Npm version\"\r\n[downloads-image]: https://img.shields.io/npm/dm/multer-gridfs-storage.svg \"Monthly downloads\"\r\n\r\n[connection-string]: https://docs.mongodb.com/manual/reference/connection-string\r\n[mongoclient-connect]: https://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html\r\n[mongo-db]: https://mongodb.github.io/node-mongodb-native/api-generated/db.html\r\n[error-handling]: https://github.com/expressjs/multer#error-handling \r\n\r\n[url-option]: #url\r\n[connectionOpts-option]: #connectionOpts\r\n[db-option]: #db\r\n[file-option]: #file\r\n[wiki]: https://github.com/devconcept/multer-gridfs-storage/wiki\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/devconcept/multer-gridfs-storage.git"
  },
  "scripts": {
    "cover": "istanbul cover ./node_modules/mocha/bin/_mocha",
    "coveralls": "npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
    "docs": "jsdoc -c ./conf.json --readme ./README.md",
    "lint": "eslint .",
    "pretest": "npm install multer@1.3",
    "preversion": "eslint .",
    "test": "mocha --require babel-register --require babel-polyfill"
  },
  "version": "3.0.1"
}
